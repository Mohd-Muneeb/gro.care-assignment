import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import Cards from "~/components/Cards";
import type { Post, Response } from "~/types/types";
import { updateVideos } from "~/features/videoSlice";
import { useAppDispatch, useAppSelector } from "~/hooks";
import Footer from "~/components/Footer";
import { useRouter } from "next/router";
import { customPage, decrementPage, incrementPage } from "~/features/pageSlice";
import React, { useEffect, useState } from "react";
// import { current } from "@reduxjs/toolkit";

interface CustomResponse {
    message: string;

    data: {
        offset: number;
        page: number;
        posts: Post[];
    };
}

const Home: NextPage<Response> = ({ data }) => {
    const router = useRouter();

    const pageNumber: string | string[] | undefined = router.query.page;

    const currentPage = useAppSelector((state) => {
        return state.page.page;
    });
    const dispatch = useAppDispatch();

    const videos = useAppSelector((state) => state.video.posts);

    const [ActiveVideos, setActiveVideos] = useState<Post[]>([]);

    useEffect(() => {
        if (pageNumber !== undefined) {
            if (typeof pageNumber == "string") {
                dispatch(customPage(pageNumber));
            }
        } else {
            dispatch(customPage("0"));
        }
        dispatch(updateVideos(data.data.posts));
    }, []);

    const handleBackward = async () => {
        if (currentPage === "0") {
            alert("Current page is already 0");
        } else {
            dispatch(decrementPage());
            console.log(currentPage);
            await fetch(
                `https://internship-service.onrender.com/videos?page=${
                    parseInt(currentPage) + 1
                }`
            )
                .then((res) => {
                    if (!res.ok) {
                        throw new Error(res.statusText);
                    }
                    return res.json();
                })
                .then((res: CustomResponse) => {
                    dispatch(updateVideos(res.data.posts));
                    return res;
                })
                .catch((err) => console.log(err));
            return;
        }
    };

    const handleForward = async () => {
        dispatch(incrementPage());
        console.log(currentPage);
        await fetch(
            `https://internship-service.onrender.com/videos?page=${
                parseInt(currentPage) + 1
            }`
        )
            .then((res) => {
                if (!res.ok) {
                    throw new Error(res.statusText);
                }

                return res.json();
            })
            .then((res: CustomResponse) => {
                dispatch(updateVideos(res.data.posts));
                return res;
            })
            .catch((err) => console.log(err));
        return;
    };

    useEffect(() => {
        setActiveVideos(videos);

        return () => setActiveVideos([]);
    }, [videos]);

    return (
        <>
            <Head>
                <title>ShortTube</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className="w-[95vw] md:ml-[2.5vw]">
                <div className=" mt-4 flex flex-col items-center justify-center gap-8  md:flex-row md:flex-wrap">
                    {ActiveVideos.map((post: Post) => {
                        return <Cards post={post} key={post.postId} />;
                    })}
                </div>
                <hr className="my-8" />
                <div className="my-4 flex items-center justify-center">
                    <div className="btn-group">
                        <button
                            className={
                                currentPage === "0" ? "btn-disabled btn" : "btn"
                            }
                            onClick={() => {
                                handleBackward().catch((err: string) => {
                                    throw new Error(err);
                                });
                                return;
                            }}
                        >
                            «
                        </button>
                        <button className="btn">
                            Page {parseInt(currentPage) + 1}
                        </button>
                        <button
                            className={
                                currentPage === "" ? "btn-disabled btn" : "btn"
                            }
                            onClick={() => {
                                handleForward().catch((err: string) => {
                                    throw new Error(err);
                                });
                                return;
                            }}
                        >
                            »
                        </button>
                    </div>
                </div>
            </div>
            <Footer />
        </>
    );
};

interface Query {
    query: {
        page: string;
    };
}

export const getServerSideProps = async (context: Query) => {
    let page = context.query.page;

    if (page === undefined) {
        page = "0";
    }

    const data: Response = await fetch(
        `https://internship-service.onrender.com/videos?page=${page}`
    )
        .then((res) => {
            if (!res.ok) {
                throw new Error(res.statusText);
            }
            return res.json();
        })
        .then((res: Response) => {
            return res;
        });

    return {
        props: { data: data, page: page },
    };
};

export default Home;
