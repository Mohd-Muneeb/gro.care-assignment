import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import Cards from "~/components/Cards";
import type { Post, Response } from "~/types/types";
import { updateVideos } from "~/features/videoSlice";
import { useAppDispatch, useAppSelector } from "~/hooks";
import Navbar from "~/components/Navbar";
import Footer from "~/components/Footer";
import { useRouter } from "next/router";
import { customPage } from "~/features/pageSlice";

const Home: NextPage<Response> = ({ data }) => {
    const router = useRouter();

    const pageNumber: string | string[] | undefined = router.query.page;

    const videoPosts = useAppSelector((state) => state.video);
    const dispatch = useAppDispatch();

    if (pageNumber !== undefined) {
        if (typeof pageNumber == "string") {
            dispatch(customPage(pageNumber));
        }
    } else {
        dispatch(customPage("0"));
    }
    // console.log(videoPosts);

    dispatch(updateVideos(data.data.posts));

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="w-[95vw] md:ml-[2.5vw]">
                <div className=" mt-4 flex flex-col items-center justify-center gap-8  md:flex-row md:flex-wrap">
                    {data.message !== "Success" ? (
                        <>Something went wrong with server</>
                    ) : (
                        data.data.posts.map((post: Post) => {
                            return (
                                <>
                                    <Cards post={post} key={post.postId} />
                                </>
                            );
                        })
                    )}
                </div>
            </main>
            <Footer />
        </>
    );
};

interface Query {
    query: {
        page: string;
    };
}

export const getServerSideProps = async (context: Query) => {
    let page = context.query.page;

    if(page === undefined){
        page = "0";
    }

    const data: Response = await fetch(
        `https://internship-service.onrender.com/videos?page=${page}`
    )
        .then((res) => {
            if (!res.ok) {
                throw new Error(res.statusText);
            }
            return res.json();
        })
        .then((res: Response) => {
            return res;
        });

    return {
        props: { data: data, page: page },
    };
};

export default Home;
